#!/bin/sh

# A posix compliant clone of util-linux rename(1)
# rename [options] expression replacement file...

PROGRAM_NAME="rename"

# usage status message fd
usage () {

	[ -n "$2" ] && echo $2

	cat >&$3 <<USAGE
Usage:
 $PROGRAM_NAME [options] expression replacement file...

Options:
 -v, --verbose	explain what is being done
 -s, --symlink	act on symlink target

 -h, --help	display this help and text
 -V, --version	output version information and exit
USAGE
	exit $1
}

version () {
	echo $PROGRAM_NAME util-linux clone, blame http://github.com/jgrar/dotfiles
	exit 0
}

verbose=
symlink=

while getopts ":vshV-:" opt
do
	case "$opt" in
	-)
		case "$OPTARG" in
		verbose)
			verbose="1"
			;;
		symlink)
			symlink="1"
			;;
		help)
			usage 0 "" 1
			;;
		version)
			version
			;;
		*)
			usage 1 "$(printf "$PROGRAM_NAME: unrecognised option '--%s'" $opt)" 2
			;;
		esac
		;;
	v)
		verbose="1"
		;;
	s)
		symlink="1"
		;;
	h)
		usage 0 "" 1
		;;
	V)
		version
		;;
	\?)
		usage 1 "$(printf "$PROGRAM_NAME: unrecognised option '-%s'" $OPTARG)" 2
		;;
	esac
done

shift $(($OPTIND - 1))

expression="$1"
replacement="$2"
shift 2

#echo $expression $replacement $@

for t in $@
do
	if [ -n "$(echo $t | grep $expression)" ]
	then
		n="$(echo $t | sed "s/$expression/$replacement/")"

		if [ -n "$symlink" ] && [ -h "$t" ]
		then
			# TODO implement readlink or someshit
			resolved="$(readlink -n $t)"
			
			#  - detect fail
			
			if [ -n "$resolved" ]
			then
				exit 1
			fi
			
			ln -s $resolved $n
			
			#  - detect fail
			if [ $? -ne 0 ]
			then
				exit 1
			fi

			rm $t
		else
			mv $t $n
		fi

		if [ $? -eq 0 ] && [ -n $verbose ]
		then
			echo $t -> $n
		fi
	fi
done
